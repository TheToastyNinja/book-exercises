# (use the `paste()` function)
now_doing <- paste(my_name, "is programming")
# Make the `now_doing` variable upper case
toupper(now_doing)
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 12
fav_2 <- 50
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1/sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("james", "victoria")
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("james", "victoria")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n+1)f
# Add 1 to each element in `n` and print the result
print(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- 10:1
# Subtract `m` FROM `n`. Note the recycling!
n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave*cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- 21:30
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- paste(first_ten, next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2,5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100
# Create a vector `even` that holds the even numbers from 1 to 100
numbers <- 1:100
even <- numbers %2 == 0
evens <- numbers % 2 == 0
evens <- numbers %% 2 == 0
even <- numbers[evens]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phon_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers <= 5
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers > 5
large <- phone_numbers[large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
larger_than_5 <- phone_numbers > 5
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(fixed>5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers>5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 ==1] <- 0
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("kung pao chicken", "rice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("nothing")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[["dinner"]] <- "Betsutenjin"
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals
$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]]<- meals[["dinner"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"]["lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast","lunch"])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast","lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals["breakfast"], meals["lunch"])
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lappy(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
lapply(meals, "length()")
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_of_items <- lapply(meals, length)
append(vector, "pizza")
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(vector){
append(vector, "pizza")
}
add_pizza(meals)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
height <- c(64, 74, 69, 71)
weight <- c(135, 156, 139, 144, 152)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
height <- c(64, 74, 69, 69, 71)
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people
people[["height"]]
colnames(people)
colnames(people) <- c("names", "heights", "weights")
people
names(people)
View(people)
people$names
people$weights
people$names[1]
rownames(people) <- people$names
people
people["Ada", "height"]
people["Ada", "heights"]
people[2, c("heights", "weights")]
is.vector(people[2, c("heights", "weights")])
is.list(people[2, c("heights", "weights")])
people[c("heights")]
people[ , c("heights")]
is.vector(people[c("heights")])
is.list(people[c("heights")])
is.vector(people[ , c("heights")])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
paste("Employee", 10:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees < paste("Employee", 10:100)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees < paste("Employee", 10:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees < paste("Employee", 10:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 10:100)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE
salaries <- data.frame(employees, salary_2017, salary_adjustments, stringsAsFactors = FALSE)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salary_2017 + salaries$salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salary_adjustments > 0
# What was the 2018 salary of Employee 57
salaries[57, "salary_2018"]
salaries$salary_2018[57]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE]
# How many employees got a raise?
salaries[salaries$got_raise == TRUE, ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
max(salaries$salary_adjustments)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == max(salaries$salary_adjustments), "employees"]
data()
data("EuStockMarkets")
View(EuStockMarkets)
?EuStockMarkets
stock_df <- as.data.frame(EuStockMarkets)
View(stock_df)
getwd()
setwd("C:/Users/ymatt/Documents/exercises/book-exercises/chapter-10-exercises/exercise-2")
setwd("C:/Users/ymatt/Documents/exercises/book-exercises/chapter-10-exercises/exercise-4")
setwd("..")
getwd()
setwd("exercise-4")
getwd()
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
View(grants)
spring_break <- as.Date("march 16, 2019")
spring_break <- as.Date("2019-03-16")
spring_break
spring_break <- as.Date("2019-03-16", "%Y/%m/%d")
spring_break <- as.Date("2019 march 3", "%Y/%m/%d")
spring_break <- as.Date("2019 march 3", %Y/%m/%d)
spring_break <- as.Date("2019march3", %Y/%m/%d)
spring_break <- as.Date("2019march03", %Y/%B/%d )
spring_break <- as.Date("2019march03", format = "%Y/%B/%d" )
spring_break <- as.Date("2019 march 03", format = "%Y/%B/%d" )
spring_break <- as.Date("2019/March/16", format = "%Y/%B/%d" )
Sys.Date
Sys.Date()
today <- Sys.Date()
spring_break-today
days_to_break <- today <- Sys.Date()
print days_to_break
print (days_to_break)
days_to_break <- spring_break-today
print (days_to_break)
birthdays <- list("Matt" = as.Date("1997-04-05", format="%Y/%m/%d" ), "Deb" = as.Date("1956-24-07", format = "%Y/%m/%d"), "Jeff" = as.Date("1951-09-05", format = "%Y/%m/%d"))
birthdays[1]
birthdays["Matt"]
birthdays <- list("Matt" = as.Date("1997-04-05", format="%Y/%m/%d" ), "Deb" = as.Date("1956-08-24", format = "%Y/%m/%d"), "Jeff" = as.Date("1951-09-05", format = "%Y/%m/%d"))
birthdays <- list("Matt" = as.Date("1997/04/05", format="%Y/%m/%d" ), "Deb" = as.Date("1956/08/24", format = "%Y/%m/%d"), "Jeff" = as.Date("1951/09/05", format = "%Y/%m/%d"))
parent_bday <- as.Date(birthdays["Jeff"], format= "/%m/%d")
parent_bday <- format(birthdays["Jeff"],"/%m/%d")
parent_bday <- format(birthdays[["Jeff"]],"/%m/%d")
parent_bday <- format(birthdays[["Jeff"]],"%m/%d")
print(parent_bday)
birthdays_2019 <- lapply(birthdays, format("2019/%m/%d"))
birthdays_2019 <- lapply(birthdays, format, "2019/%m/%d")
print(birthdays_2019)
date_has_passed <- function(date){
date-Sys.Date() > 0
}
date-Sys.Date() < 0
date_has_passed <- function(date){
date-Sys.Date() < 0
}
date_has_passed(birthdays[["Jeff"]])
date_has_passed(birthdays_2019[["Jeff"]])
date_has_passed("2019/01/23")
date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d)
date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d))
date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d))
date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d))
date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d"))
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
make_birthday_announcement <- function(name, date){
if(date_has_passed(date)){
paste(name, "'s birthday is in ", format(date, "2020/%m/%d")-Sys.Date()," days.", sep = "")
}else{
paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = "")
}
}
make_birthday_announcement("Matt", "1997/08/03")
make_birthday_announcement("Matt", as.Date("1997/08/03"))
make_birthday_announcement("Matt", as.Date("1997/08/03", format = "%Y/%m/%m"))
make_birthday_announcement("Matt", as.Date("1997/08/03", format = "%Y/%m/%m"))
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%m"))
date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%m")
date_has_passed <- function(date){
return date-Sys.Date() < 0
}
date_has_passed <- function(date){
bool = date-Sys.Date() < 0
bool
}
date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%m")
print(date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%m"))
date_has_passed(birthdays[["Jeff"]])
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
print(date_has_passed(as.Date("2019/01/24", format = "%Y/%m/%d")))
print(date_has_passed(as.Date("2019/01/23", format = "%Y/%m/%d")))
date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%d")
date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%d"))
print(date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%d")))
date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement <- function(name, date){
if(date_has_passed(format(date, 2019/%m/%d))){
paste(name, "'s birthday is in ", format(date, "2020/%m/%d")-Sys.Date()," days.", sep = "")
}else{
paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = "")
}
}
make_birthday_announcement <- function(name, date){
if(date_has_passed(format(date, "2019/%m/%d"))){
paste(name, "'s birthday is in ", format(date, "2020/%m/%d")-Sys.Date()," days.", sep = "")
}else{
paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement <- function(name, date){
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement <- function(name, date){
if(date_has_passed(as.Date(format(date, "2019/%m/%d")), "%Y/%m/%d")){
paste(name, "'s birthday is in ", format(date, "2020/%m/%d")-Sys.Date()," days.", sep = "")
}else{
paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement <- function(name, date){
if(date_has_passed(as.Date(format(date, "2019/%m/%d")), "%Y/%m/%d")){
print(paste(name, "'s birthday is in ", format(date, "2020/%m/%d")-Sys.Date()," days.", sep = ""))
}else{
print(paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = ""))
}
}
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%d"))
date_has_passed(as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement("Matt", as.Date("2020/08/03", format = "%Y/%m/%d"))
make_birthday_announcement("Matt", as.Date("2019/08/03", format = "%Y/%m/%d"))
make_birthday_announcement <- function(name, date){
make_birthday_announcement <- function(name, date){
if(date_has_passed(as.Date(format(date, "2019/%m/%d"), "%Y/%m/%d"))){
print(paste(name, "'s birthday is in ", format(date, "2020/%m/%d")-Sys.Date()," days.", sep = ""))
}else{
print(paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = ""))
}
}
make_birthday_announcement("Matt", as.Date("2019/08/03", format = "%Y/%m/%d"))
make_birthday_announcement("Matt", as.Date("2019/08/03", format = "%Y/%m/%d"))
make_birthday_announcement <- function(name, date){
if(date_has_passed(as.Date(format(date, "2019/%m/%d"), "%Y/%m/%d"))){
print(paste(name, "'s birthday is in ", as.Date(format(date, "2020/%m/%d"))-Sys.Date()," days.", sep = ""))
}else{
print(paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = ""))
}
}
make_birthday_announcement("Matt", as.Date("2019/08/03", format = "%Y/%m/%d"))
make_birthday_announcement("Matt", as.Date("2019/01/03", format = "%Y/%m/%d"))
birthdays_2019 <- lapply(as.Date(lapply(birthdays, format, "2019/%m/%d"), format = "%Y/%m/%d")
birthdays_2019 <- lapply(as.Date(lapply(birthdays, format, "2019/%m/%d"), format = "%Y/%m/%d"))
birthdays_2019 <- lapply(lapply(birthdays, format, "2019/%m/%d"), as.Date, format = "%Y/%m/%d")
birthdays_2019[1]
birthdays_2019[1,]
names(birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), birthdays_2019)
birthdays_2019
birthdays_2019[0]
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019) birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), birthdays_2019
names(birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), birthdays_2019
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), birthdays_2019)
birthdays_2019
birthdays_2019[0]
birthdays_2019.values
birthdays_2019.values()
birthdays_2019
birthdays_2019$Matt
unlist(birthdays_2019)
getValues(birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), values(birthdays_2019))
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), values(birthdays_2019))
birthdays_2019
values(birthdays_2019)
bdays <- list(birthdays_2019$Matt, birthdays_2019$Deb, birthdays_2019$Jeff)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, names(birthdays_2019), bdays)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, bdays)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, date = bdays)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, date = birthdays_2019)
bday_announcements <- lapply(birthdays_2019, make_birthday_announcement, date = date)
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = names(birthdays_2019), birthdays))
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = names(birthdays_2019), birthdays)
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = list(names(birthdays_2019), birthdays))
View(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = birthdays_2019, USE.NAMES = TRUE))
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = birthdays_2019)
make_birthday_announcement <- function(name, date){
if(date_has_passed(as.Date(format(date, "2019/%m/%d"), "%Y/%m/%d"))){
paste(name, "'s birthday is in ", as.Date(format(date, "2020/%m/%d"))-Sys.Date()," days.", sep = "")
}else{
paste(name, "'s birthday is in ", date-Sys.Date()," days.", sep = "")
}
}
make_birthday_announcement("Matt", as.Date("2019/01/03", format = "%Y/%m/%d"))
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = birthdays_2019)
bday_announcements <- mapply(make_birthday_announcement, MoreArgs = list(birthdays_2019$names, birthdays_2019))
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = list(birthdays_2019$names, birthdays_2019))
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = NULL))
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = NULL)
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = NULL)
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = NULL)
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = NULL)
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, MoreArgs = NULL, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement,birthdays_2019, USE.NAMES = TRUE)
bday_announcements <- mapply(make_birthday_announcement,names(birthdays_2019), birthdays_2019)
print(bday_announcements)
install.packages("styler")
library("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
install.packages("lintr")
lintr::lint("assignment.R")
styler:::style_active_file()
