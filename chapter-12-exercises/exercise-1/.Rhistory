# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
library(tidry)
# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
library(tidyr)
library(dplyr)
library(ggplot2)
# Exercise 1: analyzing avocado sales with the `tidyr` package
install.packages("ggplot2")
setwd("C:/Users/ymatt/Documents/exercises/book-exercises/chapter-12-exercises/exercise-1")
library(ggplot2)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- data.frame(read.csv("data/avocado.csv", stringsAsFactors = FALSE))
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
View(avocados)
avocados %>%
mutate(
Date = as.Date(Date)
)
avocados <- avocados %>%
mutate(
Date = as.Date(Date)
)
type(avocados$Date[1])
colnames(avocados)
col(names)[5:7] = c("small_haas", "large_haas", "xlarge_haas")
colnames(avocados)[5:7] <- c("small_haas", "large_haas", "xlarge_haas")
colnames(avocados)
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- avocados %>%
mutate(
other_avos = Total.Volume - small_haas - large_haas - xlarge_haas
)
by_size <- avocados %>%
select(Date, other_avos, small_haas, large_haas, xlarge_haas)
# In order to visualize this data, it needs to be reshaped. The four columns
# `other_avos`, `small_haas`, `large_haas`, `xlarge_haas` need to be
# **gathered** together into a single column called `size`. The volume of sales
# (currently stored in each column) should be stored in a new column called
# `volume`. Create a new dataframe `size_gathered` by passing the `by_size`
# data frame to the `gather()` function. `size_gathered` will only have 3
# columns: `Date`, `size`, and `volume`.
size_gathered <- by_size %>%
gather(
key = "size",
value = "volume",
other_avos, small_haas, large_haas, xlarge_haas
)
View(size_gathered)
size_gathered %>%
group_by(size) %>%
summarize(average_sales_volume = mean(volume))
# This shape also facilitates the visualization of sales over time
# (how to write this code is covered in Chapter 16)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
# We can also investigate sales by avocado type (conventional, organic).
# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- avocados %>%
group_by(Date, type)
View(by_type)
# We can also investigate sales by avocado type (conventional, organic).
# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- avocados %>%
group_by(Date, type) %>%
summarize(total = sum(Total.Volume))
by_type_wide <- by_type %>%
spread(
key = type,
value = volume
)
by_type_wide <- by_type %>%
spread(
key = type,
value = total
)
View(by_type_wide)
# Now you can create a scatterplot comparing conventional to organic sales!
# (how to write this code is covered in Chapter 16)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
base_uri <- "https://api.github.com"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(base_uri)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
org_resource <- "/orgs/{org}/repos{?type,page,per_page,sort}"
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
GET(paste0(base_uri, org_resource))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
# Extract the content of the response using the `content()` function, saving it
# in a variable.
body <- content(GET(paste0(base_uri, org_resource)), "text")
# Convert the content variable from a JSON string into a data frame.
fromJSON(body)
# Convert the content variable from a JSON string into a data frame.
fromJSON(body)[1]
# Convert the content variable from a JSON string into a data frame.
fromJSON(body)[2]
# Convert the content variable from a JSON string into a data frame.
repos <- fromJSON(body)
is.data.frame(repos)
# How many (public) repositories does the organization have?
View(repos)
repos %>%
filter(private == FALSE) %>%
count()
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "informatics")
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "https://api.github.com/search/repositories"
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(paste0(search_endpoint, query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(search_endpoint, q = query_params))
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(search_endpoint, q = query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "TheToastyNinja")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(search_endpoint, q = query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "apple")
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(search_endpoint, q = query_params)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
GET(search_endpoint)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "https://api.github.com/search/repositories/"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "any")
GET(search_endpoint, q = query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "informatics")
GET(search_endpoint, q = query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(query = "informatics")
GET(search_endpoint, q = query_params)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "informatics")
GET(search_endpoint, query = query_params)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "https://api.github.com/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "informatics")
GET(search_endpoint, query = query_params)
reponse1 <- GET(search_endpoint, query = query_params)
reponse1 <- GET(search_endpoint, query = query_params)
body <- content(response1, "text")
response1 <- GET(search_endpoint, query = query_params)
body <- content(response1, "text")
repos1 <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
count(repos1)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(repos1)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
body1 <- content(response1, "text")
repos1 <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(repos1)
response1 <- GET(search_endpoint, query = query_params)
response1 <- GET(search_endpoint, query = query_params)
response1
names(repos1)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "people")
response1 <- GET(search_endpoint, query = query_params)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
body1 <- content(response1, "text")
repos1 <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(repos1)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "TheToastyNinja")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
body1 <- content(response1, "text")
repos1 <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
is.data.frame(repos1)
names(repos1)
