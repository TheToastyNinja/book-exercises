# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997])
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(vehicles$cty, vehicles$hwy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997])
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = mean(cty, hwy))
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = (cty + hwy)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive = "2=-Wheel Drive", cty >= 20)
#128
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year - 1997)
#128
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
arrange(cars_1997, -hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty)/2)
view(cars_1997)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2wheel <- (vehicles, drive == "2=-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2wheel <- filter(vehicles, drive == "2=-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel <- filter(vehicles, drive == "2=-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2=-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2=-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2=-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
