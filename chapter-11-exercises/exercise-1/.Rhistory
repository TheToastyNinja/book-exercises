# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997"]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997])
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- mean(vehicles$cty, vehicles$hwy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
#128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997])
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = mean(cty, hwy))
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = (cty + hwy)/2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive = "2=-Wheel Drive", cty >= 20)
#128
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year - 1997)
#128
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
arrange(cars_1997, -hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty)/2)
view(cars_1997)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2wheel <- (vehicles, drive == "2=-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
2wheel <- filter(vehicles, drive == "2=-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel <- filter(vehicles, drive == "2=-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(two_wheel, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2=-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2=-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2=-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
library("dplyr")
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice){
filter(vehicles, year == year_choice, make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_car(1996, "Honda")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
library(dplyr)
library("dplyr")
# Install and load the "dplyr" library
View(fueleconomy)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(
cars_1997,
average = (hwy + cty)/2
)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
city_efficient <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(city_efficient, hwy == min(hwy)) %>%
select(id)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[ , "make"]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
#128
# Filter the data set for vehicles manufactured in 1997
cars_1997 <-vehicles[vehicles$year == 1997, ]
order(cars_1997, -hwy)
order(cars_1997$hwy)
cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average = mean(cars_1997$hwy, cars_1997$cty]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel <- filter(vehicles, drive == "2=-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty > 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice){
filter(vehicles, year == year_choice, make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_car(1996, "Honda")
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average = mean(cars_1997$hwy, cars_1997$cty)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- mean(cars_1997$hwy, cars_1997$cty)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
city_efficient <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- city_efficient[city_efficient$hwy == min(city_efficient$hwy), city_efficient$id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- city_efficient[city_efficient$hwy == min(city_efficient$hwy), city_efficient$id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- city_efficient[city_efficient$hwy == min(city_efficient$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- city_efficient[city_efficient$hwy == min(city_efficient$hwy), city_efficient$id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- city_efficient[city_efficient$hwy == min(city_efficient$hwy), $id]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_car <- city_efficient[city_efficient$hwy == min(city_efficient$hwy), "id"]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice){
selected_cars <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
model <- selected_cars[selectedcars$hwy == max(selected_cars$hwy), "model"]
model
}
# What was the most efficient Honda model of 1995?
best_car(1996, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_car <- function(year_choice, make_choice){
selected_cars <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
model <- selected_cars[selected_cars$hwy == max(selected_cars$hwy), "model"]
model
}
# What was the most efficient Honda model of 1995?
best_car(1996, "Honda")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
column.names(flights)
column_names(flights)
colnames(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(
flights,
time_diff = arr_delay-dep_delay
)
flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(
flights,
time_diff = arr_delay-dep_delay
)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, tim_diff)
e
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, time_diff)
View(flights)
library(nycflights13)
library(nycflights13)
library(dplyr)
flights
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights1 <- mutate(
flights,
time_diff = arr_delay-dep_delay
)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights1, time_diff)
View(flights1)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights1, desc, time_diff)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(
flights,
time_diff = arr_delay-dep_delay
)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, time_diff)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(
time_diff = arr_delay-dep_delay
) %>%
arrange(time_diff)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(
time_diff = arr_delay-dep_delay
) %>%
arrange(time_diff)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(
time_diff = arr_delay-dep_delay
) %>%
arrange(time_diff)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, day))
# Which month had the greatest average departure delay?
flights %>%
group_by(month) %>%
summarize(dep_delay_by_month <- mean(dep_delay)) %>%
summarise(max(deo_delay_by_month))
# Which month had the greatest average departure delay?
flights %>%
group_by(month) %>%
summarize(dep_delay_by_month <- mean(dep_delay)) %>%
summarise(max(dep_delay_by_month))
library(solution)
# Which month had the greatest average departure delay?
flights %>%
group_by(month) %>%
filter(dep_delay == max(dep_delay))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights %>%
group_by(month) %>%
summarize(av_dep_delay <- mean(dep_delay))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights %>%
group_by(month) %>%
summarize(av_dep_delay <- mean(dep_delay, na.rm = TRUE))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
flights %>%
dep_delay_by_month <- group_by(month) %>%
summarize(av_dep_delay <- mean(dep_delay, na.rm = TRUE))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(av_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
dep_delay_by_month
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE))
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
